import java.util.ArrayList;


public class HuffmanTree implements Comparable<HuffmanTree>{

 HuffmanTreeNode node = new HuffmanTreeNode();

 public HuffmanTree(){}

 public HuffmanTree(HuffmanTreeNode node){
  this.node = node;
 }

 public HuffmanTreeNode getNode(){
  return this.node;
 }

 public int compareTo(HuffmanTree tree){
  if (this.getNode().getFrequency()<tree.getNode().getFrequency()){
   return -1;
  } else if (this.getNode().getFrequency()==tree.getNode().getFrequency()){
   return 0;
  } else {
   return 1;
  }
 }

 public void mergeWithLeftSibling(ArrayList<HuffmanTree> list){
  int comfreq = list.get(0).getNode().getFrequency() + list.get(1).getNode().getFrequency();  
  HuffmanTree parent = new HuffmanTree(new HuffmanTreeNode(comfreq));
  parent.getNode().setLeft(list.get(0));
  parent.getNode().setRight(list.get(1));
  list.remove(0);
  list.remove(1);
  list.add(0,parent);
 }
}
